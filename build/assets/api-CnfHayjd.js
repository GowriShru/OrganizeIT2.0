import{t as d}from"./index-BR4xEgPS.js";import{p as y,a as u}from"./index-DtNahLzf.js";const m=`https://${y}.supabase.co/functions/v1/make-server-efc8e70a`;async function r(e,t={},s=!0){try{const n=`${m}${e}`,o=await fetch(n,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${u}`,...t.headers},...t});if(!o.ok){const i=await o.text();let a=`Request failed: ${o.status}`;try{a=JSON.parse(i).error||a}catch{a=i||a}throw console.error(`API Error [${e}]:`,a),s&&d.error(a),new Error(a)}const c=await o.json();if(console.log(`âœ“ API Success [${e}]`,c),s&&(t.method==="POST"||t.method==="PUT"||t.method==="DELETE")){const i=c.message||"Operation completed successfully";d.success(i)}return c}catch(n){throw console.error(`API Exception [${e}]:`,n),s&&!(n instanceof Error&&n.message.includes("Request failed"))&&d.error("Network error. Please check your connection."),n}}const S={async getOperationsData(){const[e,t,s]=await Promise.all([r("/metrics/dashboard",{method:"GET"},!1),r("/alerts/current",{method:"GET"},!1),r("/services/health",{method:"GET"},!1)]);return{metrics:e,alerts:t,services:s}},async restartService(e){return r("/services/restart",{method:"POST",body:JSON.stringify({serviceId:e})})},async resolveAlert(e,t){return r(`/alerts/${e}/status`,{method:"PUT",body:JSON.stringify({status:"Resolved",resolution:t})})},async scaleService(e,t){return r("/services/scale",{method:"POST",body:JSON.stringify({serviceId:e,instances:t})})}},O={async getFinOpsData(){const[e,t]=await Promise.all([r("/finops/costs",{method:"GET"},!1),r("/finops/optimization",{method:"GET"},!1)]);return{costs:e,optimization:t}},async applyOptimization(e){return r("/finops/apply-optimization",{method:"POST",body:JSON.stringify({optimizationId:e})})},async setBudgetAlert(e,t){return r("/finops/set-budget-alert",{method:"POST",body:JSON.stringify({threshold:e,email:t})})},async exportReport(e,t,s){return r("/finops/export-report",{method:"POST",body:JSON.stringify({reportType:e,dateRange:t,format:s})})}},g={async getESGData(){const[e,t]=await Promise.all([r("/esg/carbon",{method:"GET"},!1),r("/esg/sustainability",{method:"GET"},!1)]);return{carbon:e,sustainability:t}},async updateTarget(e,t){return r("/esg/update-target",{method:"POST",body:JSON.stringify({target:e,value:t})})},async generateReport(e,t){return r("/esg/generate-report",{method:"POST",body:JSON.stringify({period:e,scope:t})})}},p={async getProjectsData(){return r("/projects",{method:"GET"},!1)},async updateProjectStatus(e,t,s){return r("/projects/update-status",{method:"POST",body:JSON.stringify({projectId:e,status:t,notes:s})})},async createProject(e){return r("/projects",{method:"POST",body:JSON.stringify(e)})},async createTask(e){return r("/projects/create-task",{method:"POST",body:JSON.stringify(e)})},async getProjectDetails(e){return r(`/projects/${e}/details`,{method:"GET"},!1)},async editTask(e,t){return r(`/projects/tasks/${e}/edit`,{method:"POST",body:JSON.stringify(t)})},async sendTeamMessage(e,t,s){return r("/team/message",{method:"POST",body:JSON.stringify({userId:e,message:t,channel:s})})}},P={async runAnalysis(e,t){return r("/ai/analyze",{method:"POST",body:JSON.stringify({dataType:e,parameters:t})})},async runOptimization(e,t){return r("/ai/optimize",{method:"POST",body:JSON.stringify({optimization_type:e,target_metric:t})})},async trainModel(e,t,s){return r("/ai/train-model",{method:"POST",body:JSON.stringify({model_name:e,training_data:t,parameters:s})})},async generateReport(e,t,s=!0){return r("/ai/generate-report",{method:"POST",body:JSON.stringify({report_type:e,time_period:t,include_predictions:s})})},async dismissInsight(e,t){return r("/ai/dismiss-insight",{method:"POST",body:JSON.stringify({insightId:e,reason:t})})},async implementInsight(e,t){return r("/ai/implement-insight",{method:"POST",body:JSON.stringify({insightId:e,implementation_plan:t})})},async retrainModel(e,t=!0,s){return r(`/ai/models/${e}/retrain`,{method:"POST",body:JSON.stringify({use_latest_data:t,training_parameters:s})})},async deployModel(e,t="production",s="gradual"){return r(`/ai/models/${e}/deploy`,{method:"POST",body:JSON.stringify({environment:t,rollout_strategy:s})})}},T={async configureAutoScaling(e,t){return r("/resources/auto-scale",{method:"POST",body:JSON.stringify({resource_type:e,scaling_policy:t})})},async startCleanup(e){return r("/resources/cleanup",{method:"POST",body:JSON.stringify({resource_types:e})})},async scheduleOptimization(e,t,s,n){return r("/resources/schedule-optimization",{method:"POST",body:JSON.stringify({optimization_type:e,schedule_time:t,resources:s,parameters:n})})},async applyAllRecommendations(e=!0,t=!1){return r("/resources/apply-all-recommendations",{method:"POST",body:JSON.stringify({confirm_apply:e,exclude_high_risk:t})})},async getRecommendationDetails(e){return r(`/resources/recommendations/${e}/details`,{method:"GET"},!1)},async implementRecommendation(e,t=!0,s){return r(`/resources/recommendations/${e}/implement`,{method:"POST",body:JSON.stringify({confirm_implementation:t,rollback_plan:s})})},async configureWorkload(e,t,s=!0,n=!0){return r("/resources/workload-configure",{method:"POST",body:JSON.stringify({workload_name:e,schedule_config:t,carbon_aware:s,cost_optimization:n})})}},b={async resetPassword(e,t){return r("/identity/reset-password",{method:"POST",body:JSON.stringify({userId:e,email:t})})},async updatePermissions(e,t){return r("/identity/update-permissions",{method:"POST",body:JSON.stringify({userId:e,permissions:t})})},async exportUsers(e="csv",t,s=!1){return r("/identity/export-users",{method:"POST",body:JSON.stringify({format:e,filters:t,include_sensitive:s})})},async addUser(e){return r("/identity/add-user",{method:"POST",body:JSON.stringify(e)})},async manageUser(e,t,s){return r(`/identity/users/${e}/manage`,{method:"POST",body:JSON.stringify({action:t,...s})})},async verifyCredential(e,t="blockchain"){return r(`/identity/credentials/${e}/verify`,{method:"POST",body:JSON.stringify({verification_method:t})})},async renewCredential(e,t="12 months",s=!1){return r(`/identity/credentials/${e}/renew`,{method:"POST",body:JSON.stringify({renewal_period:t,auto_renew:s})})}},N={async getNotifications(){return r("/notifications",{method:"GET"},!1)},async markAsRead(e){const t=e.map(s=>r(`/notifications/${s}/read`,{method:"PUT",body:JSON.stringify({read:!0})}));return Promise.all(t)},async configureNotifications(e,t,s){return r("/notifications/configure",{method:"POST",body:JSON.stringify({channels:e,frequency:t,types:s})})}},J={async search(e,t){return r("/search",{method:"POST",body:JSON.stringify({query:e,filters:t})},!1)}},A={async exportData(e,t,s,n=!0){return r("/export",{method:"POST",body:JSON.stringify({module:e,format:t,dateRange:s,includeCharts:n})})}},E={async getDashboardData(){return r("/metrics/dashboard",{method:"GET"},!1)},async manageUsers(e="view",t){return r("/admin/manage-users",{method:"POST",body:JSON.stringify({action:e,filters:t})})},async runAudit(e="comprehensive",t){return r("/admin/run-audit",{method:"POST",body:JSON.stringify({audit_type:e,scope:t})})},async startBackup(e="full",t=!0,s=!0){return r("/admin/start-backup",{method:"POST",body:JSON.stringify({backup_type:e,include_databases:t,include_files:s})})},async configureSystem(e){return r("/admin/configure-system",{method:"POST",body:JSON.stringify({settings:e})})},async generateReports(e=["system","security","performance","compliance"]){return r("/admin/generate-reports",{method:"POST",body:JSON.stringify({report_types:e})})},async resolveIssues(e,t=!1){return r("/admin/resolve-issues",{method:"POST",body:JSON.stringify({issue_ids:e,auto_resolve:t})})}},I={async applyFilters(e,t,s,n,o){return r("/audit/filter",{method:"POST",body:JSON.stringify({filters:e,date_range:t,risk_levels:s,users:n,services:o})})},async exportAuditLogs(e="csv",t,s=!0,n){return r("/audit/export",{method:"POST",body:JSON.stringify({format:e,date_range:t,include_blockchain:s,filters:n})})},async searchLogs(e,t,s="comprehensive"){return r("/audit/search",{method:"POST",body:JSON.stringify({query:e,filters:t,search_type:s})})},async getLogDetails(e){return r(`/audit/${e}/details`,{method:"GET"},!1)}},$={async checkHealth(){return r("/health",{method:"GET"},!1)}},v={async initializeData(){return r("/init/data",{method:"POST"},!1)},async checkInitialized(){return r("/init/status",{method:"GET"},!1)}};function w(e,t){return async(...s)=>{try{return t?.(!0),await e(...s)}finally{}}}export{E as a,g as b,P as c,I as d,A as e,O as f,v as g,$ as h,b as i,N as n,S as o,p,T as r,J as s,w};
