/* AUTOGENERATED FILE - DO NOT EDIT CONTENTS */

/* Table schema:
CREATE TABLE kv_store_2566089e (
  key TEXT NOT NULL PRIMARY KEY,
  value JSONB NOT NULL
);
*/

// View at https://supabase.com/dashboard/project/muexyxceffmiwgkbdffx/database/tables

// This file provides a simple key-value interface for storing Figma Make data. It should be adequate for most small-scale use cases.
import { createClient } from "jsr:@supabase/supabase-js@2.49.8";

const client = () => createClient(
  Deno.env.get("SUPABASE_URL"),
  Deno.env.get("SUPABASE_SERVICE_ROLE_KEY"),
);

// Global flag to track if KV store is available
let kvStoreAvailable: boolean | null = null;
let kvCheckInProgress = false;

// Check if KV store table exists (only check once at startup)
const checkKVStoreAvailability = async (): Promise<boolean> => {
  // Return cached result if already checked
  if (kvStoreAvailable !== null) {
    return kvStoreAvailable;
  }
  
  // Prevent multiple simultaneous checks
  if (kvCheckInProgress) {
    // Wait for the in-progress check to complete
    while (kvCheckInProgress) {
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    return kvStoreAvailable ?? false;
  }
  
  kvCheckInProgress = true;
  
  try {
    const supabase = client();
    // Try a simple query to check if table exists
    const { error } = await supabase.from("kv_store_2566089e").select("key").limit(1);
    
    if (error) {
      // Table doesn't exist or can't be accessed
      if (error.message.includes("Could not find the table") || 
          error.message.includes("relation") ||
          error.message.includes("does not exist")) {
        kvStoreAvailable = false;
        console.log('ℹ️  KV Store table not found - running in memory-only mode');
      } else {
        // Other error, assume not available
        kvStoreAvailable = false;
      }
    } else {
      // Table exists and is accessible
      kvStoreAvailable = true;
      console.log('✓ KV Store connected');
    }
  } catch (e) {
    kvStoreAvailable = false;
  } finally {
    kvCheckInProgress = false;
  }
  
  return kvStoreAvailable ?? false;
};

// Set stores a key-value pair in the database.
export const set = async (key: string, value: any): Promise<void> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    // Silently skip if KV store not available
    return;
  }
  
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_2566089e").upsert({
      key,
      value
    });
    // Don't log errors - just fail silently
  } catch (e) {
    // Swallow errors silently
  }
};

// Get retrieves a key-value pair from the database.
export const get = async (key: string): Promise<any> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    // Silently return null if KV store not available
    return null;
  }
  
  try {
    const supabase = client()
    const { data, error } = await supabase.from("kv_store_2566089e").select("value").eq("key", key).maybeSingle();
    if (error) {
      return null;
    }
    return data?.value;
  } catch (e) {
    return null;
  }
};

// Delete deletes a key-value pair from the database.
export const del = async (key: string): Promise<void> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    return;
  }
  
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_2566089e").delete().eq("key", key);
    // Fail silently
  } catch (e) {
    // Swallow errors silently
  }
};

// Sets multiple key-value pairs in the database.
export const mset = async (keys: string[], values: any[]): Promise<void> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    return;
  }
  
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_2566089e").upsert(keys.map((k, i) => ({ key: k, value: values[i] })));
    // Fail silently
  } catch (e) {
    // Swallow errors silently
  }
};

// Gets multiple key-value pairs from the database.
export const mget = async (keys: string[]): Promise<any[]> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    return [];
  }
  
  try {
    const supabase = client()
    const { data, error } = await supabase.from("kv_store_2566089e").select("value").in("key", keys);
    if (error) {
      return [];
    }
    return data?.map((d) => d.value) ?? [];
  } catch (e) {
    return [];
  }
};

// Deletes multiple key-value pairs from the database.
export const mdel = async (keys: string[]): Promise<void> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    return;
  }
  
  try {
    const supabase = client()
    const { error } = await supabase.from("kv_store_2566089e").delete().in("key", keys);
    // Fail silently
  } catch (e) {
    // Swallow errors silently
  }
};

// Search for key-value pairs by prefix.
export const getByPrefix = async (prefix: string): Promise<any[]> => {
  const available = await checkKVStoreAvailability();
  if (!available) {
    return [];
  }
  
  try {
    const supabase = client()
    const { data, error } = await supabase.from("kv_store_2566089e").select("key, value").like("key", prefix + "%");
    if (error) {
      return [];
    }
    return data?.map((d) => d.value) ?? [];
  } catch (e) {
    return [];
  }
};